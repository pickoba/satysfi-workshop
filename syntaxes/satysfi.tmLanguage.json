{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "SATySFi",
  "patterns": [
    {
      "include": "#meta"
    },
    {
      "include": "#program-mode"
    }
  ],
  "repository": {
    "meta": {
      "patterns": [
        {
          "match": "(@(require|import|stage)):\\s*.+$",
          "captures": {
            "1": {
              "name": "keyword.control.satysfi"
            }
          }
        }
      ]
    },

    "program-mode": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#block-bracket-in-program"
        },
        {
          "$comment": "order matters. it must come before #inline-brace.",
          "include": "#math-brace"
        },
        {
          "include": "#inline-brace"
        },
        {
          "include": "#command-name-in-program"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#storage"
        },
        {
          "include": "#type"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#bool"
        },
        {
          "include": "#function"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#string"
        },
        {
          "include": "#paren-like-in-program"
        },
        {
          "include": "#dummy-in-program"
        }
      ]
    },
    "block-mode": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#block-command"
        },
        {
          "include": "#block-bracket-in-text"
        },
        {
          "include": "#inline-brace"
        }
      ]
    },
    "inline-mode": {
      "patterns": [
        {
          "include": "#escape"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#variable"
        },
        {
          "$comment": "order matters. it must come before #inline-brace.",
          "include": "#math-brace"
        },
        {
          "include": "#inline-command"
        },
        {
          "include": "#inline-brace"
        },
        {
          "include": "#block-bracket-in-text"
        },
        {
          "include": "#embedded-string"
        },
        {
          "include": "#itemize"
        }
      ]
    },
    "math-mode": {
      "patterns": [
        {
          "include": "#escape"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#math-command"
        },
        {
          "include": "#math-operator"
        },
        {
          "include": "#brace-in-math"
        },
        {
          "include": "#program-in-math"
        },
        {
          "include": "#block-in-math"
        },
        {
          "include": "#inline-in-math"
        }
      ]
    },

    "numeric": {
      "patterns": [
        {
          "name": "constant.numeric.hexadecimal.integer.satysfi",
          "match": "(?<![0-9a-zA-Zあ-ん一-龠々、。，．@\\w])(0x|0X)[0-9A-F]+"
        },
        {
          "name": "constant.numeric.decimal.length.satysfi",
          "match": "(?<![0-9a-zA-Zあ-ん一-龠々、。，．@\\w])\\-?(([0-9]+\\.[0-9]*)|(\\.[0-9]+))[a-z][0-9a-zA-Z\\-]*"
        },
        {
          "name": "constant.numeric.decimal.length.satysfi",
          "match": "(?<![0-9a-zA-Zあ-ん一-龠々、。，．@\\w])\\-?([1-9][0-9]+|[0-9])[a-z][0-9a-zA-Z\\-]*"
        },
        {
          "name": "constant.numeric.decimal.float.satysfi",
          "match": "(?<![0-9a-zA-Zあ-ん一-龠々、。，．@\\w])([0-9]+\\.[0-9]*)|(\\.[0-9]+)"
        },
        {
          "name": "constant.numeric.decimal.integer.satysfi",
          "match": "(?<![0-9a-zA-Zあ-ん一-龠々、。，．@\\w])([1-9][0-9]+|[0-9])"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])(end|in|match|with|when|as|fun|of|if|then|else|while|do|before|constraint|controls|cycle)(?![0-9a-zA-Z\\-])"
        },
        {
          "name": "keyword.control.satysfi",
          "match": "\\??\\-\\>|\\<\\-"
        },
        {
          "name": "keyword.operator.satysfi",
          "match": "[\\+\\-\\*/\\^&!\\=\\<\\>][\\+\\-\\*/\\^&\\|!:\\=\\<\\>~'\\.\\?]*"
        },
        {
          "$comment": "single | (OR) cannot be used as an operator",
          "name": "keyword.operator.satysfi",
          "match": "\\|[\\+\\-\\*/\\^&\\|!:\\=\\<\\>~'\\.\\?]+"
        },
        {
          "name": "keyword.operator.satysfi",
          "match": "~|::"
        },
        {
          "name": "variable.parameter.optional.satysfi",
          "match": "\\?[:\\*]?"
        },
        {
          "name": "keyword.operator.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])(mod|not|command)(?![0-9a-zA-Z\\-])"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma.satysfi",
          "match": ","
        },
        {
          "name": "punctuation.separator.semicolon.satysfi",
          "match": ";"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])(struct|module|open|let(\\-(inline|math|rec|block|mutable))?|sig|and|val|direct|type)(?![0-9a-zA-Z\\-])"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "name": "support.type.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])(unit|int|bool|float|length|string|inline-text|inline-boxes|block-text|block-boxes|inline-cmd|block-cmd|math-cmd|paddings|deco|deco-set|context|graphics|document|script|image|point|pre-path|path|color|font|language|math|obj|math-class|math-kern-func|math-char-style|paren|math-char-class|option|type-syntax|list|itemize)(?![0-9a-zA-Z\\-])"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "name": "constant.language.satysfi",
          "match": "_"
        },
        {
          "name": "constant.language.unit.satysfi",
          "match": "\\(\\)"
        },
        {
          "name": "constant.language.list.satysfi",
          "match": "\\[\\]"
        },
        {
          "name": "constant.language.capital-identifier.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])([A-Z][0-9a-zA-Z\\-]*)(?![0-9a-zA-Z\\-])"
        }
      ]
    },
    "bool": {
      "patterns": [
        {
          "name": "constant.language.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])(true|false)(?![0-9a-zA-Z\\-])"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "name": "support.function.satysfi",
          "match": "(?<![0-9a-zA-Z\\-])(abort-with-message|acos|add-footnote|arabic|asin|atan|atan2|band|bezier-to|block-(frame-breakable|skip|nil)|bnot|bor|break|bxor|ceil|clear-page|clip-graphics-by-path|close-with-(bezier|line)|convert-string-for-math|cos|dashed-stroke|deepen-indent|discretionary|display-message|draw-text|embed-(block-(bottom|breakable|top)|math|string)|exp|extract-string|fill|float|floor|get-(axis-height|cross-reference|dominant-(narrow-script|wide-script)|every-word-break|font(-size)?|graphics-bbox|initial-(context|text-info)|input-position|language|left-math-class|leftmost-script|natural-(length|metrics)|path-bbox|right-math-class|rightmost-script|space-ratio-between-scripts|text-(color|width))|hook-page-break(-block)?|inline-(fil|frame-(breakable|fixed|inner|outer)|glue|graphics(-outer)?|nil|skip)|lift-(float|int|length|string)|line-(break|stack-(bottom|top)|to)|linear-transform-(graphics|path)|load-(image|pdf-image)|log|math-(big-char(-with-kern)?|char(-(class|with-kern))?|color|concat|frac|group|lower|paren(-with-middle)?|pull-in-scripts|radical|sub|sup|upper|variant-char)|omit-skip-after|page-break(-(multicolumn|two-column))?|probe-cross-reference|raise-inline|read-(block|file|inline)|regexp-of-string|register-(cross-reference|destination|document-information|link-to-(location|uri)|outline)|round|script-guard(-both)?|set-(adjacent-stretch-ratio|code-text-command|dominant-(narrow-script|wide-script)|every-word-break|font(-size)?|hyphen-(min|penalty)|language|leading|manual-rising|math-(char|command|font|variant-char)|min-(gap-of-lines|paragraph-ascender-and-descender)|paragraph-margin|space-ratio(-between-scripts)?|text-color|word-break-penalty)|shift-(graphics|path)|show-float|sin|space-between-maths|split-(into-lines|on-regexp)|start-path|string-(byte-length|explode|length|match|same|scan|sub(-bytes)?|unexplode)|stringify-(block|inline)|stroke|tabular|tan|terminate-path|text-in-math|unite-path|use-image-by-width)(?![0-9a-zA-Z\\-])"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.satysfi",
          "match": "%.*"
        }
      ]
    },
    "string": {
      "name": "string.quoted.satysfi",
      "begin": "(?<!`)[#@]?(`+)(?!`)",
      "end": "\\1#?"
    },
    "paren-like-in-program": {
      "patterns": [
        {
          "begin": "\\(\\|",
          "end": "\\|\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.record.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.record.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.list.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.list.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        }
      ]
    },
    "block-bracket-in-program": {
      "$comment": "block text included in program",
      "patterns": [
        {
          "begin": "'\\<",
          "end": "\\>",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block-text.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block-text.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#block-mode"
            }
          ]
        }
      ]
    },
    "command-name-in-program": {
      "patterns": [
        {
          "name": "entity.name.section.satysfi",
          "match": "\\+[a-zA-Z][0-9a-zA-Z\\-]*@?"
        },
        {
          "name": "entity.name.function.satysfi",
          "match": "\\\\[a-zA-Z][0-9a-zA-Z\\-]*@?"
        }
      ]
    },
    "dummy-in-program": {
      "match": "[a-zA-Z][0-9a-zA-Z\\-]*"
    },

    "block-command": {
      "$comment": "block command and its arguments enclosed in parentheses",
      "patterns": [
        {
          "begin": "\\+([A-Z][0-9a-zA-Z\\-]*\\.)*[a-zA-Z][0-9a-zA-Z\\-]*@?",
          "beginCaptures": {
            "0": {
              "name": "entity.name.section.satysfi"
            }
          },
          "end": ";|(?=\\{|\\<)",
          "patterns": [
            {
              "include": "#argument"
            }
          ]
        }
      ]
    },
    "block-bracket-in-text": {
      "$comment": "block included in inline-text or block-text. This is an argument for some command.",
      "patterns": [
        {
          "begin": "\\<",
          "end": "\\>",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block-text.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block-text.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#block-mode"
            }
          ]
        }
      ]
    },

    "inline-command": {
      "$comment": "inline command and its arguments enclosed in parentheses",
      "patterns": [
        {
          "begin": "\\\\([A-Z][0-9a-zA-Z\\-]*\\.)*[a-zA-Z][0-9a-zA-Z\\-]*@?",
          "beginCaptures": {
            "0": {
              "name": "entity.name.function.satysfi"
            }
          },
          "end": ";|(?=\\{|\\<)",
          "patterns": [
            {
              "include": "#argument"
            }
          ]
        }
      ]
    },
    "itemize": {
      "patterns": [
        {
          "name": "punctuation.definition.list.begin.markdown",
          "match": "[\\*]+"
        }
      ]
    },
    "math-brace": {
      "patterns": [
        {
          "begin": "(\\$)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.satysfi"
            },
            "2": {
              "name": "punctuation.definition.math.begin.satysfi"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.math.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#math-mode"
            }
          ]
        }
      ]
    },
    "embedded-string": {
      "name": "markup.inline.raw.string.satysfi",
      "begin": "(?<!`)#?(`+)(?!`)",
      "end": "\\1#?"
    },
    "escape": {
      "patterns": [
        {
          "name": "constant.character.escape.satysfi",
          "match": "\\\\[ \\{\\}\\<\\>\\|%\\*;#\\$\\\\\\@\\`]"
        }
      ]
    },

    "math-command": {
      "$comment": "math command. arguments not included.",
      "patterns": [
        {
          "match": "\\\\([A-Z][0-9a-zA-Z\\-]*\\.)*[a-zA-Z][0-9a-zA-Z\\-]*",
          "name": "entity.name.function.satysfi"
        }
      ]
    },
    "math-operator": {
      "patterns": [
        {
          "name": "entity.name.function.satysfi",
          "match": "(?<!\\\\)(\\_|\\^)"
        }
      ]
    },
    "brace-in-math": {
      "patterns": [
        {
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.math.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.math.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#math-mode"
            }
          ]
        }
      ]
    },
    "program-in-math": {
      "patterns": [
        {
          "begin": "\\!(\\(\\|)",
          "end": "\\|\\)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.record.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.record.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        },
        {
          "begin": "\\!(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.parenthesis.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        },
        {
          "begin": "\\!(\\[)",
          "end": "\\]",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.list.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.list.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        }
      ]
    },
    "block-in-math": {
      "patterns": [
        {
          "begin": "\\!(\\<)",
          "end": "\\>",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.block-text.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block-text.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#block-mode"
            }
          ]
        }
      ]
    },
    "inline-in-math": {
      "patterns": [
        {
          "begin": "\\!(\\{)",
          "end": "\\}",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.inline-text.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.inline-text.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#inline-mode"
            }
          ]
        }
      ]
    },

    "argument": {
      "$comment": "argument for some command. include program.",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "begin": "\\(\\|",
          "end": "\\|\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.record.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.record.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.parenthesis.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.list.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.list.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#program-mode"
            }
          ]
        }
      ]
    },
    "inline-brace": {
      "$comment": "inline included in any context (inline, block, program). this is an argument for some command.",
      "patterns": [
        {
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.inline-text.begin.satysfi"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.inline-text.end.satysfi"
            }
          },
          "patterns": [
            {
              "include": "#inline-mode"
            }
          ]
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "name": "variable.paramater.satysfi",
          "match": "\\#([A-Z][0-9a-zA-Z\\-]*\\.)*[a-zA-Z][0-9a-zA-Z\\-]*"
        }
      ]
    }
  },
  "scopeName": "text.saty.satyh"
}
